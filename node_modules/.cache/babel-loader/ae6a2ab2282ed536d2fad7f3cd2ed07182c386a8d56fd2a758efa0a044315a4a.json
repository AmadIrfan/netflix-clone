{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/42kha/OneDrive/Desktop/NETFLIX CLONE/netflix/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"C:/Users/42kha/OneDrive/Desktop/NETFLIX CLONE/netflix/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"C:/Users/42kha/OneDrive/Desktop/NETFLIX CLONE/netflix/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useEffect,useState}from\"react\";import axios from\"./axios\";import\"./Row.css\";import YouTube from\"react-youtube\";import movieTrailer from\"movie-trailer\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var base_url=\"https://image.tmdb.org/t/p/original/\";function Row(_ref){var title=_ref.title,fetchUrl=_ref.fetchUrl,isLargeRow=_ref.isLargeRow;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),movies=_useState2[0],setMovies=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),trailerUrl=_useState4[0],setTrailerUrl=_useState4[1];useEffect(function(){function fetchData(){return _fetchData.apply(this,arguments);}function _fetchData(){_fetchData=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(){var request;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:_context.next=2;return axios.get(fetchUrl);case 2:request=_context.sent;setMovies(request.data.results);return _context.abrupt(\"return\",request);case 5:case\"end\":return _context.stop();}},_callee);}));return _fetchData.apply(this,arguments);}fetchData();},[fetchUrl]);var opts={height:\"390\",width:\"100%\",playerVars:{// https://developers.google.com/youtube/player_parameters\nautoplay:1}};var handleClick=function handleClick(movie){if(trailerUrl){setTrailerUrl(\" \");}else{movieTrailer((movie===null||movie===void 0?void 0:movie.name)||\"\").then(function(url){// https://www.youtube.com/watch?v=XtMThy8QKqU\nvar urlParams=new URLSearchParams(new URL(url).search);setTrailerUrl(urlParams.get(\"v\"));}).catch(function(error){return console.log(error);});}};console.table(movies);return/*#__PURE__*/_jsxs(\"div\",{className:\"row\",children:[/*#__PURE__*/_jsx(\"h2\",{children:title}),/*#__PURE__*/_jsx(\"div\",{className:\"row-posters\",children:movies.map(function(movie){return/*#__PURE__*/_jsx(\"img\",{onClick:function onClick(){return handleClick(movie);},className:\"row-poster \".concat(isLargeRow&&\"row-posterLarge\"),src:\"\".concat(base_url).concat(isLargeRow?movie.poster_path:movie.backdrop_path),alt:movie.name},movie.id);})}),trailerUrl&&/*#__PURE__*/_jsx(YouTube,{videoId:trailerUrl,opts:opts})]});}export default Row;","map":{"version":3,"names":["React","useEffect","useState","axios","YouTube","movieTrailer","jsx","_jsx","jsxs","_jsxs","base_url","Row","_ref","title","fetchUrl","isLargeRow","_useState","_useState2","_slicedToArray","movies","setMovies","_useState3","_useState4","trailerUrl","setTrailerUrl","fetchData","_fetchData","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","request","wrap","_callee$","_context","prev","next","get","sent","data","results","abrupt","stop","opts","height","width","playerVars","autoplay","handleClick","movie","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","table","className","children","map","onClick","concat","src","poster_path","backdrop_path","alt","id","videoId"],"sources":["C:/Users/42kha/OneDrive/Desktop/NETFLIX CLONE/netflix/src/Row.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport axios from \"./axios\";\r\nimport \"./Row.css\";\r\nimport YouTube from \"react-youtube\";\r\nimport movieTrailer from \"movie-trailer\";\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\r\nfunction Row({ title, fetchUrl, isLargeRow }) {\r\n  const [movies, setMovies] = useState([]);\r\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(fetchUrl);\r\n      setMovies(request.data.results);\r\n      return request;\r\n    }\r\n    fetchData();\r\n  }, [fetchUrl]);\r\n\r\n  const opts = {\r\n    height: \"390\",\r\n    width: \"100%\",\r\n    playerVars: {\r\n      // https://developers.google.com/youtube/player_parameters\r\n      autoplay: 1,\r\n    },\r\n  };\r\n\r\n  const handleClick = (movie) => {\r\n    if (trailerUrl) {\r\n      setTrailerUrl(\" \");\r\n    } else {\r\n      movieTrailer(movie?.name || \"\")\r\n        .then((url) => {\r\n          // https://www.youtube.com/watch?v=XtMThy8QKqU\r\n          const urlParams = new URLSearchParams(new URL(url).search);\r\n          setTrailerUrl(urlParams.get(\"v\"));\r\n        })\r\n        .catch((error) => console.log(error));\r\n    }\r\n  };\r\n  console.table(movies);\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <h2>{title}</h2>\r\n      <div className=\"row-posters\">\r\n        {movies.map((movie) => (\r\n          <img\r\n            key={movie.id}\r\n            onClick={() => handleClick(movie)}\r\n            className={`row-poster ${isLargeRow && \"row-posterLarge\"}`}\r\n            src={`${base_url}${\r\n              isLargeRow ? movie.poster_path : movie.backdrop_path\r\n            }`}\r\n            alt={movie.name}\r\n          />\r\n        ))}\r\n      </div>\r\n      {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Row;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}